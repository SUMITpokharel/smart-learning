const db = require("../model");
const Chat = db.Chat;
const User = db.Users;
// Get logged-in user
exports.getLoggedInUser = async (req, res) => {
  try {
    const userId = req.userId; // Extracted from JWT token or session
    if (!userId) {
      return res.status(401).json({ message: "User not logged in" });
    }

    // Fetch user details from the database
    const user = await User.findByPk(userId, {
      attributes: ["id", "name", "image"],
    });

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    res.status(200).json(user);
  } catch (error) {
    console.error("Error fetching user:", error);
    res.status(500).json({ message: "Error fetching user", error });
  }
};

// Get all chat messages
exports.getAllMessages = async (req, res) => {
  try {
    const messages = await Chat.findAll({
      include: [{ model: User, attributes: ["id", "name", "image"] }],
      order: [["timestamp", "ASC"]],
    });
    res.status(200).json(messages);
  } catch (error) {
    res.status(500).json({ message: "Error retrieving messages", error });
  }
};

// Send a new message
exports.sendMessage = async (req, res) => {
  try {
    const { userId, message } = req.body;
    if (!userId || !message.trim()) {
      return res.status(400).json({ message: "User and message are required" });
    }
    const newMessage = await Chat.create({ userId, message });
    const fullMessage = await Chat.findOne({
      where: { id: newMessage.id },
      include: [{ model: User, attributes: ["id", "name", "image"] }],
    });
    res.status(201).json(fullMessage);
  } catch (error) {
    console.error("Error sending message:", error);
    res.status(500).json({ message: "Error sending message", error });
  }
};
